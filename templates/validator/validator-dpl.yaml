apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  annotations:
    reloader.stakater.com/auto: "true"
  name: {{ .Release.Name }}-validator
  namespace: {{ .Release.Namespace }}
spec:
  replicas: 1
  template:
    metadata:
      labels:
        name: {{ .Release.Name }}-validator
    spec:
      containers:
      - name: {{ .Values.validator.name }}
        image: {{ .Values.validator.image.repository }}:{{ .Values.validator.image.tag }}
        command:
        - bash
        args:
        - -c  
        - "ln -sf /sawtooth-config/validator.toml /etc/sawtooth/validator.toml; \
           mkdir -p /etc/sawtooth/keys; \
           if [ ! -f /etc/sawtooth/keys/validator.priv ]; then \
             echo 'creating validator key'; \
             sawadm keygen; \
           fi && \
           mkdir -p /poet-shared || true && \
           cp -a /etc/sawtooth/keys /poet-shared && \
{{- if .Values.validator.genesis }}
           while [ ! -f /poet-shared/poet-enclave-measurement ]; do \
               echo 'waiting for poet-enclave-measurement'; \
               sleep 1; \
           done && \
           while [ ! -f /poet-shared/poet-enclave-basename ]; do \
               echo 'waiting for poet-enclave-basename'; \
               sleep 1; \
           done && \
           while [ ! -f /poet-shared/poet.batch ]; do \
               echo 'waiting for poet.batch'; \
               sleep 1; \
           done && \
           cp /poet-shared/poet.batch /etc/sawtooth && \
           if [ ! -e /etc/sawtooth/config-genesis.batch ]; then \
             sawset genesis -k /etc/sawtooth/keys/validator.priv -o /etc/sawtooth/config-genesis.batch; \
           fi && \
           if [ ! -e /etc/sawtooth/config.batch ]; then \
             echo 'creating config.batch'; \
             sawset proposal create \
               -k /etc/sawtooth/keys/validator.priv \
               sawtooth.consensus.algorithm.name=PoET \
               sawtooth.consensus.algorithm.version=0.1 \
               sawtooth.poet.report_public_key_pem=\"$(cat /poet-shared/simulator_rk_pub.pem)\" \
               sawtooth.poet.valid_enclave_measurements=$(cat /poet-shared/poet-enclave-measurement) \
               sawtooth.poet.valid_enclave_basenames=$(cat /poet-shared/poet-enclave-basename) \
               sawtooth.poet.initial_wait_time=15 \
               sawtooth.poet.target_wait_time=15 \
               sawtooth.publisher.max_batches_per_block=200 \
                sawtooth.poet.key_block_claim_limit=100000 \
               sawtooth.poet.ztest_minimum_win_count=100000 \
               -o /etc/sawtooth/config.batch; \
           fi && \
           if [ ! -e /var/lib/sawtooth/genesis.batch ] && [ ! -e /var/lib/sawtooth/block-00.lmdb ]; then \
             echo 'creating genesis.batch'; \
             sawadm genesis /etc/sawtooth/config-genesis.batch /etc/sawtooth/config.batch /etc/sawtooth/poet.batch; \
           fi && \
{{- end }}
           sawtooth-validator"
        ports:
        - name: tp
          containerPort: 4004
        - name: consensus
          containerPort: 5050
        - name: validators
          containerPort: 8800
        volumeMounts:
        - name: sawtooth-data
          mountPath: "/var/log/sawtooth"
          subPath: log
        - name: sawtooth-data
          mountPath: "/var/lib/sawtooth"
          subPath: lib
        - name: sawtooth-data
          mountPath: "/etc/sawtooth"
          subPath: etc
        - name: sawtooth-data
          mountPath: "/root/.sawtooth"
          subPath: userkeys
        - name: sawtooth-data
          mountPath: "/poet-shared"
          subPath: poet-shared
        - name: sawtooth-config
          mountPath: "/sawtooth-config"
      - name: {{ .Values.poet_engine.name }}
        image: {{ .Values.poet_engine.image.repository }}:{{ .Values.poet_engine.image.tag }}
        command:
        - bash
        args:
        - -c
        - "cp -a /poet-shared/keys /etc/sawtooth && \
{{- if .Values.validator.genesis }}
          if [ ! -f /poet-shared/poet-enclave-measurement ]; then \
            poet enclave measurement >> /poet-shared/poet-enclave-measurement; \
          fi && \
          if [ ! -f /poet-shared/poet-enclave-basename ]; then \
            poet enclave basename >> /poet-shared/poet-enclave-basename; \
          fi && \
          if [ ! -f /poet-shared/simulator_rk_pub.pem ]; then \
            cp /etc/sawtooth/simulator_rk_pub.pem /poet-shared; \
          fi && \
          while [ ! -f /poet-shared/keys/validator.priv ]; do \
            echo 'waiting for validator key'; \
            sleep 1; \
          done && \
          if [ ! -f /poet-shared/poet.batch ]; then \
            echo 'create poet.batch';
            poet registration create -k /etc/sawtooth/keys/validator.priv -o /poet-shared/poet.batch && \
            echo 'created poet.batch';
          fi && \
{{- end }}
         poet-engine -vv -C tcp://$HOSTNAME:5050 --component tcp://$HOSTNAME:4004"
        volumeMounts:
        - name: sawtooth-data
          mountPath: "/poet-shared"
          subPath: poet-shared
        - name: sawtooth-data
          mountPath: "/var/lib/sawtooth"
          subPath: lib
      volumes:
      - name: sawtooth-data
        persistentVolumeClaim:
          claimName: {{ required "missing pvc name" .Values.persistence.pvc.name }}
      - name: sawtooth-config
        configMap:
          name: {{ .Release.Name }}-config
