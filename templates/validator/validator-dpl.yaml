apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Release.Name }}-validator
spec:
  replicas: 1
  template:
    metadata:
      labels:
        name:
    spec:
      containers:
      - name: {{ .Release.Name }}-validator
        image: {{ .Values.validator.image.repository }}:{{ .Values.validator.image.tag }}
        command:
        - bash
        args:
        - -c  
        - "
{{- if .Values.validator.genesis }}
        mkdir -p /etc/sawtooth/keys; \
           if [ ! -f /etc/sawtooth/keys/validator.priv ]; then \
             echo 'creating validator key'; \
             sawadm keygen; \
           fi && \
           mkdir -p /poet-shared/sawtooth-0 || true && \
           cp -a /etc/sawtooth/keys /poet-shared/sawtooth-0 && \
           while [ ! -f /poet-shared/poet-enclave-measurement ]; do \
               echo 'waiting for poet-enclave-measurement'; \
               sleep 1; \
           done && \
           while [ ! -f /poet-shared/poet-enclave-basename ]; do \
               echo 'waiting for poet-enclave-basename'; \
               sleep 1; \
           done && \
           while [ ! -f /poet-shared/poet.batch ]; do \
               echo 'waiting for poet.batch'; \
               sleep 1; \
           done && \
           cp /poet-shared/poet.batch /etc/sawtooth && \
           if [ ! -e /etc/sawtooth/config-genesis.batch ]; then \
             sawset genesis -k /etc/sawtooth/keys/validator.priv -o /etc/sawtooth/config-genesis.batch; \
           fi && \
           if [ ! -e /etc/sawtooth/config.batch ]; then \
             echo 'creating config.batch'; \
             sawset proposal create \
               -k /etc/sawtooth/keys/validator.priv \
               sawtooth.consensus.algorithm=poet \
               sawtooth.poet.report_public_key_pem=\"$(cat /poet-shared/simulator_rk_pub.pem)\" \
               sawtooth.poet.valid_enclave_measurements=$(cat /poet-shared/poet-enclave-measurement) \
               sawtooth.poet.valid_enclave_basenames=$(cat /poet-shared/poet-enclave-basename) \
               sawtooth.poet.initial_wait_time=15 \
               sawtooth.poet.target_wait_time=15 \
               sawtooth.publisher.max_batches_per_block=200 \
                sawtooth.poet.key_block_claim_limit=100000 \
               sawtooth.poet.ztest_minimum_win_count=100000 \
               -o /etc/sawtooth/config.batch; \
           fi && \
           if [ ! -e /var/lib/sawtooth/genesis.batch ] && [ ! -e /etc/sawtooth/chain-exists ]; then \
             echo 'creating genesis.batch'; \
             sawadm genesis /etc/sawtooth/config-genesis.batch /etc/sawtooth/config.batch /etc/sawtooth/poet.batch; \
             touch /etc/sawtooth/chain-exists; \
           fi && \
{{- end }}
           sawtooth-validator \
             --endpoint tcp://$SAWTOOTH_0_SERVICE_HOST:8800 \
             --bind component:tcp://eth0:4004 \
             --bind consensus:tcp://eth0:5050 \
             --bind network:tcp://eth0:8800 \
             --peers tcp://$SAWTOOTH_1_SERVICE_HOST:8800 \
             --peers tcp://$SAWTOOTH_2_SERVICE_HOST:8800 \
             --peers tcp://$SAWTOOTH_3_SERVICE_HOST:8800 \
             --peers tcp://$SAWTOOTH_4_SERVICE_HOST:8800 \
             --opentsdb-db sawtooth_metrics \
             --opentsdb-url influxdb.default:8086"
        ports:
        - name: tp
          containerPort: 4004
        - name: consensus
          containerPort: 5050
        - name: validators
          containerPort: 8800
        volumeMounts:
        - name: sawtooth-data
          mountPath: "/var/log/sawtooth"
          subPath: log
        - name: sawtooth-data
          mountPath: "/var/lib/sawtooth"
          subPath: lib
        - name: sawtooth-data
          mountPath: "/etc/sawtooth"
          subPath: etc
        - name: sawtooth-data
          mountPath: "/root/.sawtooth"
          subPath: userkeys
        - name: sawtooth-data
          mountPath: "/poet-shared"
          subPath: poet-shared
      volumes:
      - name: sawtooth-data
        persistentVolumeClaim:
          claimName: {{ .Values.persistence.claimName }}